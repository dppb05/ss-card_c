#ifndef _STEX_H_
#define _STEX_H_

#pragma once

#include "matrix.h"

typedef struct st_silhouet {
    size_t objc;
    size_t clustc;
    double *objsil;
    double *clustsil;
    double avgsil;
} silhouet;

// Remaps 'labels' with 'size' elements according to
// 'factors', an array with the label mapping.
// Params:
void remap(int *labels, size_t size, int *factors);

// Defuzzifies fuzzy matrix 'fuzmtx' by using the first
// maxima method.
// Params:
//  fuzmtx - an object x class fuzzy matrix.
// Return:
//  An array of size 'fuzmtx->nrow' with the crip values for each
//  object.
int* defuz(st_matrix *fuzmtx);

// Creates a confusion matrix.
// Params:
//  labels - the labels of each object.
//  pred - the predicted labels of each object.
//  size - the size of the 'labels' and 'pred' arrays.
// Return:
//  A confusion matrix (size + 1) x (size + 1).
st_matrix* confusion(int *labels, int *pred, size_t size);

// Computes the f-measure (F1-score) from 'confmtx'.
// Params:
//  confmtx - confusion matrix generated by 'confusion' function
//  verbose - flag indicating whether verbose is active
// Return:
//  Returns the F1-score for 'confmtx'. If 'verbose' is true, this
//  function will print the f-measure matrix.
double fmeasure(st_matrix *confmtx, bool verbose);

// Computes the Normalized Mutual Information metric
// Params:
//  confmtx - confusion matrix generated by 'confusion' function
// Return:
//  Returns the nmi metric for the given 'confmtx'.
double nmi(st_matrix *confmtx);

// Computes the fuzzy partition coefficient.
// Params:
//  fuzmtx - an 'object x class' fuzzy matrix.
// Return:
//  The partition coefficient validation index.
double partcoef(st_matrix *fuzmtx);

// Computes the fuzzy modified partition coefficient.
// Params:
//  fuzmtx - an 'object x class' fuzzy matrix.
// Return:
//  The partition modified coefficient validation index.
double modpcoef(st_matrix *fuzmtx);

// Computes the partition entropy of a fuzzy membership matrix.
// Params:
//  fuzmtx - an 'object x class' fuzzy matrix.
// Return:
//  The partition entropy validation index.
double partent(st_matrix *fuzmtx);

// Computes the corrected Rand index.
// Params:
//  labels - the labels of each object.
//  pred - the predicted labels of each object.
//  size - the size of the 'labels' and 'pred' arrays.
// Return:
//  The corrected Rand index.
double corand(int *labels, int *pred, size_t size);

double avg_intra_dist(st_matrix *fuzmtx, st_matrix *dist, double mfuz);

silhouet* crispsil(st_matrix *groups, st_matrix *dmatrix);

silhouet* simplesil(int *pred, st_matrix *cent_dist);

silhouet* fuzzysil(silhouet *sil, st_matrix *groups, st_matrix *memb,
                    double alpha);

void print_groups(st_matrix *groups);

void print_groups_(int **groups, size_t groupsc);

// Generates an stratified sample with 'size' elements from 'groups',
// generated from 'asgroups' (stex.h)
int** gen_sample(st_matrix *groups, double sample_perc);

// Returns the 'size' objects aggregated by 'groupc' groups according
// to 'labels'.
// Params:
//  labels - the labels for each object, must be in [0,'groupc']
//  size - size of labels, number of objects
//  groupc - number of groups
// Return:
//  Objects aggregated by groups inside a st_matrix, the first
//  element of each row indicates the groups cardinality followed by
//  the object that belongs to that group. Matrix dimension is
//  'groupc' by ('size' + 1)
st_matrix* asgroups(int *labels, size_t size, size_t groupc);

// Semantically equivalent to 'asgroups', but does not encapsulate
// the result in an st_matrix, returns an int** instead.
// Params:
//  labels - the labels for each object, must be in [0,'groupc']
//  size - size of labels, number of objects
//  groupc - number of groups
// Return:
//  Objects aggregated by groups in an int**, the first element of
//  each row indicates the groups cardinality followed by the object
//  that belongs to that group. Each row has the size of the exact
//  cardinality of its group, which means each row may have
//  different sizes.
int** asgroups_(int *labels, size_t size, size_t groupc);

silhouet* avg_silhouet(silhouet *s1, silhouet *s2);

void free_silhouet(silhouet *s);

void print_silhouet(silhouet *s);

#endif /* _STEX_H_ */

